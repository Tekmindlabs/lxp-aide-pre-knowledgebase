generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  status             Status              @default(ACTIVE)
  userType           UserType?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  deleted            DateTime?
  dataRetentionDate  DateTime?
  coordinatorProfile CoordinatorProfile?
  parentProfile      ParentProfile?
  studentProfile     StudentProfile?
  teacherProfile     TeacherProfile?
  userRoles          UserRole[]
}

model Calendar {
  id          String       @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  type        CalendarType @default(PRIMARY)
  status      Status       @default(ACTIVE)
  isDefault   Boolean      @default(false)
  visibility  Visibility   @default(ALL)
  metadata    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  events      Event[]
  programs    Program[]
  terms       Term[]

  @@unique([name, type])
  @@index([isDefault])
  @@index([status])
  @@index([type])
}

model Event {
  id          String     @id @default(cuid())
  title       String
  description String?
  eventType   EventType
  startDate   DateTime
  endDate     DateTime
  calendarId  String
  status      Status     @default(ACTIVE)
  priority    Priority   @default(MEDIUM)
  visibility  Visibility @default(ALL)
  recurrence  Json?
  metadata    Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  calendar    Calendar   @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@unique([title, calendarId])
  @@index([calendarId])
  @@index([eventType])
  @@index([startDate, endDate])
  @@index([status])
}

model Term {
  id         String   @id @default(cuid())
  name       String
  calendarId String
  startDate  DateTime
  endDate    DateTime
  status     Status   @default(ACTIVE)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  calendar   Calendar @relation(fields: [calendarId], references: [id])

  @@unique([name, calendarId])
}

model Program {
  id            String              @id @default(cuid())
  name          String              @unique
  description   String?
  status        Status              @default(ACTIVE)
  calendarId    String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  coordinatorId String?
  calendar      Calendar            @relation(fields: [calendarId], references: [id])
  coordinator   CoordinatorProfile? @relation(fields: [coordinatorId], references: [id])
}

model StudentProfile {
  id          String         @id @default(cuid())
  userId      String         @unique
  dateOfBirth DateTime?
  classId     String?
  parentId    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  parent      ParentProfile? @relation(fields: [parentId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
}

model TeacherProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  specialization String?
  availability   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

model CoordinatorProfile {
  id        String    @id @default(cuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  programs  Program[]
}

model ParentProfile {
  id        String           @id @default(cuid())
  userId    String           @unique
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])
  children  StudentProfile[]
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  userRoles   UserRole[]
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

enum CalendarType {
  PRIMARY
  SECONDARY
  EXAM
  ACTIVITY
}

enum Priority {
  HIGH
  MEDIUM
  LOW
}

enum Visibility {
  ALL
  STAFF
  STUDENTS
  PARENTS
}

enum UserType {
  ADMIN
  COORDINATOR
  TEACHER
  STUDENT
  PARENT
}

enum Status {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum EventType {
  ACADEMIC
  HOLIDAY
  EXAM
  ACTIVITY
  OTHER
}
